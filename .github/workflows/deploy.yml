name: Deploy to Production

on:
  push:
    branches: [ new-frontend ]

jobs:
  publish:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: 'Build WWW Image'
        
        run: |
          docker build . --tag ghcr.io/diehlms/icfc-www:${{ github.sha }}
          docker push ghcr.io/diehlms/icfc-www:${{ github.sha }}

  deploy:
    runs-on: [self-hosted, linux, X64]
    needs: [publish]
    steps:
      - uses: actions/checkout@v2

      - uses: Homebrew/actions/setup-homebrew@master

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

      - name: Update Docker Compose File with Image
        run: |
          export IMAGE="ghcr.io/diehlms/icfc-www:${{ github.sha }}"
          yq eval ".services.web.image = \"$IMAGE\"" -i docker-compose-production.yml

      - name: Deploy to server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          scp -i ~/.ssh/deploy_key docker-compose-production.yml $DEPLOY_USER@$DEPLOY_HOST:~/app/docker-compose-production.yml
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST '\
            cd ~/app && \
            docker compose -f docker-compose-production.yml up -d'
