---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/v1/articles":
    get:
      summary: list articles
      tags:
      - Articles
      parameters:
      - name: page
        in: query
        description: Page number for pagination
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/articleOut"
    post:
      summary: create article
      tags:
      - Articles
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/articleOut"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/articleIn"
  "/v1/articles/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show article
      tags:
      - Articles
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/articleOut"
    put:
      summary: update article
      tags:
      - Articles
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/articleOut"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/articleUpdate"
    delete:
      summary: delete article
      tags:
      - Articles
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/auth/login":
    post:
      summary: login authentication
      tags:
      - Auth
      description: login, get new session
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/loginPayload"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/loginPayload"
  "/v1/auth/signup":
    post:
      summary: signup authentication
      tags:
      - Auth
      description: sign up
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/signupPayload"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/signupPayload"
  "/v1/cabin_attachments":
    post:
      summary: create cabin_attachment
      tags:
      - Cabin Attachments
      responses:
        '200':
          description: successful
  "/v1/cabin_attachments/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    delete:
      summary: delete cabin_attachment
      parameters: []
      tags:
      - Cabin Attachments
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/cabin_dates":
    post:
      summary: create cabin_date
      tags:
      - Cabin Dates
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/cabinDateIn"
  "/v1/cabin_dates/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    delete:
      summary: delete cabin_date
      tags:
      - Cabin Dates
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/cabins":
    get:
      summary: list cabins
      tags:
      - Cabins
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/cabinOut"
    post:
      summary: create cabin
      tags:
      - Cabins
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/cabinOut"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/cabinIn"
  "/v1/cabins/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show cabin
      tags:
      - Cabins
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/cabinOut"
    put:
      summary: update cabin
      tags:
      - Cabins
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/cabinOut"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/cabinUpdate"
    delete:
      summary: delete cabin
      tags:
      - Cabins
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/charts":
    get:
      summary: list charts
      tags:
      - Charts
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/chartOut"
    post:
      summary: create chart
      tags:
      - Charts
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/chartOut"
  "/v1/charts/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show chart
      tags:
      - Charts
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/chartOut"
    delete:
      summary: delete chart
      tags:
      - Charts
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/comments":
    post:
      summary: create comment
      tags:
      - Comments
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/commentIn"
  "/v1/comments/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    delete:
      summary: delete comment
      tags:
      - Comments
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/committees":
    get:
      summary: list committees
      tags:
      - Committees
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: committeeOut
                items:
                  "$ref": "#/components/schemas/committeeOut"
  "/v1/documents":
    get:
      summary: list documents
      tags:
      - Documents
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/documentOut"
    post:
      summary: create document
      tags:
      - Documents
      responses:
        '200':
          description: successful
  "/v1/documents/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    delete:
      summary: delete document
      tags:
      - Documents
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/entry/initial_payload":
    get:
      summary: get initial payload
      tags:
      - Entry
      responses:
        '200':
          description: successful
  "/v1/entry/campers":
    get:
      summary: campers
      tags:
      - Entry
      responses:
        '200':
          description: successful
  "/v1/entry/recent_articles":
    get:
      summary: recent articles
      tags:
      - Entry
      responses:
        '200':
          description: successful
  "/v1/entry/this_weeks_events":
    get:
      summary: this weeks events
      tags:
      - Entry
      responses:
        '200':
          description: successful
  "/v1/events":
    get:
      summary: list events
      tags:
      - Events
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/eventOut"
    post:
      summary: create event
      tags:
      - Events
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/eventOut"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/eventIn"
  "/v1/events/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show event
      tags:
      - Events
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/eventOut"
    put:
      summary: update event
      tags:
      - Events
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/eventOut"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/eventIn"
    delete:
      summary: delete event
      tags:
      - Events
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/family_members":
    post:
      summary: create family_member
      tags:
      - Family Members
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/familyMemberIn"
    put:
      summary: update family_member
      tags:
      - Family Members
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/relationshipArray"
  "/v1/family_members/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    delete:
      summary: delete family_member
      tags:
      - Family Members
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/family_trees":
    get:
      summary: list family_trees
      tags:
      - Family Trees
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/familyTreeOut"
    post:
      summary: create family_tree
      tags:
      - Family Trees
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$refs": "#/components/schemas/familyTreeIn"
  "/v1/family_trees/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show family_tree
      tags:
      - Family Trees
      responses:
        '200':
          description: successful
    delete:
      summary: delete family_tree
      tags:
      - Family Trees
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/galleries":
    get:
      summary: list galleries
      tags:
      - Galleries
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/galleryOut"
    post:
      summary: create gallery
      tags:
      - Galleries
      parameters: []
      responses:
        '200':
          description: successful
  "/v1/galleries/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    delete:
      summary: delete gallery
      tags:
      - Galleries
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/location_points":
    get:
      summary: list location_points
      tags:
      - Location Points
      responses:
        '200':
          description: successful
    post:
      summary: create location_point
      tags:
      - Location Points
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$refs": "#/components/schemas/locationPointIn"
  "/v1/location_points/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    delete:
      summary: delete location_point
      tags:
      - Location Points
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/password_resets":
    post:
      summary: create password_reset
      tags:
      - Password Resets
      parameters:
      - name: email
        in: query
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/v1/password_resets/init_reset_password":
    get:
      summary: show password_reset
      tags:
      - Password Resets
      parameters:
      - name: password_reset_token
        in: query
        description: password_reset_token
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/v1/password_resets/{password_reset_token}":
    patch:
      summary: update password
      tags:
      - Password Resets
      parameters:
      - name: password_reset_token
        in: query
        description: password_reset_token
        schema:
          type: string
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: updated password
  "/v1/rideshares":
    get:
      summary: list rideshares
      tags:
      - Rideshares
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/rideshareOut"
    post:
      summary: create rideshare
      tags:
      - Rideshares
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/rideshareOut"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/rideshareIn"
  "/v1/rideshares/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show rideshare
      tags:
      - Rideshares
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/rideshareOut"
    put:
      summary: update rideshare
      tags:
      - Rideshares
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/rideshareOut"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/rideshareIn"
    delete:
      summary: delete rideshare
      tags:
      - Rideshares
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/createUpdateBaseModel"
  "/v1/search":
    post:
      summary: create search
      tags:
      - Search
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/searchIn"
  "/v1/users":
    get:
      summary: list users
      tags:
      - Users
      responses:
        '200':
          description: successful
    post:
      summary: create user
      tags:
      - Users
      responses:
        '200':
          description: successful
  "/v1/users/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show user
      tags:
      - Users
      responses:
        '200':
          description: successful
    patch:
      summary: update user
      tags:
      - Users
      responses:
        '200':
          description: successful
    put:
      summary: update user
      responses:
        '200':
          description: successful
    delete:
      summary: delete user
      tags:
      - Users
      responses:
        '200':
          description: successful
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: icfc.localhost:3010/api
components:
  schemas:
    not_found:
      type: object
      properties:
        message:
          type: string
    loginPayload:
      type: object
      required:
      - email
      properties:
        email:
          type: string
          example: test@gmail.com
        password:
          type: string
          format: password
    signupPayload:
      type: object
      required:
      - email
      properties:
        firstname:
          type: string
          example: ''
        lastname:
          type: string
          example: ''
        phonenumber:
          type: string
        username:
          type: string
          example: ''
        email:
          type: string
          example: test@gmail.com
        password:
          type: password
        password_confirmation:
          type: password
    baseModel:
      type: object
      properties:
        id:
          type: number
        created_at:
          type: string
          format: datetime
        updated_at:
          type: string
          format: datetime
    createUpdateBaseModel:
      properties:
        user_id:
          type: number
    attachmentBaseModel:
      properties:
        url:
          type: string
        thumb:
          type: object
        large:
          type: object
    author:
      type: object
      properties:
        id:
          type: number
        email:
          type: string
          format: email
        username:
          type: string
        created_at:
          type: string
          format: datetime
        updated_at:
          type: string
          format: datetime
        admin:
          type: boolean
        phone_number:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        verified:
          type: boolean
        slug:
          type: string
        recently_joined?:
          type: boolean
    articleIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        title:
          type: string
        content:
          type: string
        pinned:
          type: boolean
        user_id:
          type: number
    articleUpdate:
      allOf:
      - "$ref": "#/components/schemas/baseModel"
      - "$ref": "#/components/schemas/articleIn"
      - "$ref": "#/components/schemas/createUpdateBaseModel"
    articleOut:
      type: object
      allOf:
      - "$ref": "#/components/schemas/baseModel"
      - "$ref": "#/components/schemas/articleIn"
      properties:
        id:
          type: number
        image:
          "$ref": "#/components/schemas/attachmentBaseModel"
        user:
          "$ref": "#/components/schemas/author"
        comments:
          type: array
          items:
            "$ref": "#/components/schemas/commentOut"
    cabinAttachmentIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        cabin_in:
          type: number
        image:
          type: string
          format: binary
    cabinAttachmentOut:
      allOf:
      - "$ref": "#/components/schemas/cabinAttachmentIn"
      - "$ref": "#/components/schemas/baseModel"
    cabinDateIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        cabin_id:
          type: number
        startdate:
          type: string
          format: datetime
        enddate:
          type: string
          format: datetime
    cabinDateOut:
      allOf:
      - "$ref": "#/components/schemas/baseModel"
      - "$ref": "#/components/schemas/cabinDateIn"
    cabinIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        name:
          type: string
        bedrooms:
          type: number
        washerdryer:
          type: boolean
        dock:
          type: boolean
        user_id:
          type: number
        price_per_week:
          type: number
        price_per_day:
          type: number
        description:
          type: string
    cabinOut:
      type: object
      allOf:
      - "$ref": "#/components/schemas/baseModel"
      - "$ref": "#/components/schemas/cabinIn"
      properties:
        id:
          type: number
        cabindates:
          type: array
          items:
            "$ref": "#/components/schemas/cabinDateOut"
        cabin_attachments:
          type: array
          items:
            "$ref": "#/components/schemas/cabinAttachmentOut"
        user:
          "$ref": "#/components/schemas/author"
    cabinUpdate:
      allOf:
      - "$ref": "#/components/schemas/cabinOut"
      - "$ref": "#/components/schemas/createUpdateBaseModel"
    chartIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        caption:
          type: string
    chartOut:
      allOf:
      - "$ref": "#/components/schemas/chartIn"
      - "$ref": "#/components/schemas/baseModel"
      properties:
        chart:
          "$ref": "#/components/schemas/attachmentBaseModel"
        id:
          type: number
        user:
          "$ref": "#/components/schemas/author"
    commentIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        content:
          type: string
        user_id:
          type: number
        article_id:
          type: number
    commentOut:
      allOf:
      - "$ref": "#/components/schemas/baseModel"
      - "$ref": "#/components/schemas/commentIn"
      properties:
        id:
          type: number
    committeeIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        url:
          type: string
        name:
          type: string
    committeeOut:
      allOf:
      - "$ref": "#/components/schemas/baseModel"
      - "$ref": "#/components/schemas/committeeIn"
    documentIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        document_title:
          type: string
        document_folder:
          type: string
        document:
          "$ref": "#/components/schemas/attachmentBaseModel"
    documentOut:
      allOf:
      - "$ref": "#/components/schemas/baseModel"
      - "$ref": "#/components/schemas/documentIn"
    eventIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        location:
          type: string
        description:
          type: string
        start_time:
          type: string
          format: datetime
        end_time:
          type: string
          format: datetime
        user_id:
          type: number
    eventOut:
      allOf:
      - "$ref": "#/components/schemas/baseModel"
      - "$ref": "#/components/schemas/eventIn"
      properties:
        id:
          type: number
        user:
          "$ref": "#/components/schemas/author"
    eventUpdate:
      allOf:
      - "$ref": "#/components/schemas/eventIn"
      - "$ref": "#/components/schemas/createUpdateBaseModel"
    familyMemberIn:
      type: array
      items:
        allOf:
        - "$ref": "#/components/schemas/createUpdateBaseModel"
        properties:
          name:
            type: string
          relationship:
            type: string
          family_tree_id:
            type: number
          parent_id:
            type: number
    familyTreeIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        name:
          type: string
    familyTreeOut:
      allOf:
      - "$ref": "#/components/schemas/baseModel"
      - "$ref": "#/components/schemas/familyTreeIn"
      properties:
        user:
          "$ref": "#/components/schemas/author"
    locationPointIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        location_name:
          type: string
        location_description:
          type: string
    locationPointOut:
      allOf:
      - "$ref": "#/components/schemas/locationPointIn"
      - "$ref": "#/components/schemas/baseModel"
    galleryIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        image:
          type: string
          format: binary
        caption:
          type: string
        user_id:
          type: number
    galleryOut:
      allOf:
      - "$ref": "#/components/schemas/galleryIn"
      - "$ref": "#/components/schemas/baseModel"
      properties:
        image:
          "$ref": "#/components/schemas/attachmentBaseModel"
        user:
          "$ref": "#/components/schemas/author"
    passwordResetPayload:
      type: object
      properties:
        password:
          type: string
          format: password
        password_confirmation:
          type: string
          format: password
    rideshareIn:
      allOf:
      - "$ref": "#/components/schemas/createUpdateBaseModel"
      properties:
        user_id:
          type: number
        number_of_passengers:
          type: number
        additional_information:
          type: string
        arriving_at:
          type: string
        departing_at:
          type: string
        point_of_arrival_id:
          type: string
        point_of_departure_id:
          type: string
        seeking:
          type: boolean
    rideshareOut:
      allOf:
      - "$ref": "#/components/schemas/rideshareIn"
      - "$ref": "#/components/schemas/baseModel"
      properties:
        id:
          type: number
        user:
          "$ref": "#/components/schemas/author"
    rideshareUpdate:
      allOf:
      - "$ref": "#/components/schemas/rideshareIn"
      - "$ref": "#/components/schemas/createUpdateBaseModel"
    userIn:
      type: object
      properties: {}
    relationshipArray:
      type: array
      items:
        allOf:
        - "$ref": "#/components/schemas/createUpdateBaseModel"
        properties:
          child:
            type: string
          parent:
            type: string
        required:
        - child
        - parent
    searchIn:
      type: object
      properties:
        search:
          type: string
  securitySchemes:
    AuthToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
