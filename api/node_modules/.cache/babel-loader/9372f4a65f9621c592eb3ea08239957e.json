{"ast":null,"code":"var _jsxFileName = \"/Users/diehl/Documents/Projects/icfc/app/javascript/src/components/shared/Toast.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Message } from 'semantic-ui-react';\nexport default function ErrorToast(props) {\n  var _this = this;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      messageType = _useState2[0],\n      setMessageType = _useState2[1];\n\n  var errors = props.errors,\n      successMessages = props.successMessages;\n  useEffect(function () {\n    if (!!errors && !!errors[1] && !!errors[1].errors) {\n      setMessageType('errors');\n    }\n\n    if (!!successMessages && !!successMessages[1] && !!successMessages[1].successMessages) {\n      console.log(successMessages[1].successMessages);\n      setMessageType('successMessages');\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, !!messageType && messageType === 'errors' && Array.isArray(errors[1].errors) ? /*#__PURE__*/React.createElement(Message, {\n    negative: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Message.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }\n  }, \"Oops!\"), /*#__PURE__*/React.createElement(Message.List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 25\n    }\n  }, errors[1].errors.map(function (error, i) {\n    return /*#__PURE__*/React.createElement(Message.Item, {\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 37\n      }\n    }, error);\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }), !!messageType && messageType === 'successMessages' && !!successMessages[1].successMessages ? /*#__PURE__*/React.createElement(Message, {\n    success: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Message.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Message.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 29\n    }\n  }, successMessages[1].successMessages))) : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/diehl/Documents/Projects/icfc/app/javascript/src/components/shared/Toast.js"],"names":["React","useEffect","useState","Message","ErrorToast","props","messageType","setMessageType","errors","successMessages","console","log","Array","isArray","map","error","i"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACtC,kBAAsCH,QAAQ,CAAC,IAAD,CAA9C;AAAA;AAAA,MAAOI,WAAP;AAAA,MAAoBC,cAApB;;AAEA,MAAQC,MAAR,GAAoCH,KAApC,CAAQG,MAAR;AAAA,MAAgBC,eAAhB,GAAoCJ,KAApC,CAAgBI,eAAhB;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAAC,CAACO,MAAF,IAAY,CAAC,CAACA,MAAM,CAAC,CAAD,CAApB,IAA2B,CAAC,CAACA,MAAM,CAAC,CAAD,CAAN,CAAUA,MAA3C,EAAmD;AAC/CD,MAAAA,cAAc,CAAC,QAAD,CAAd;AACH;;AAED,QAAI,CAAC,CAACE,eAAF,IAAqB,CAAC,CAACA,eAAe,CAAC,CAAD,CAAtC,IAA6C,CAAC,CAACA,eAAe,CAAC,CAAD,CAAf,CAAmBA,eAAtE,EAAuF;AACnFC,MAAAA,OAAO,CAACC,GAAR,CAAYF,eAAe,CAAC,CAAD,CAAf,CAAmBA,eAA/B;AACAF,MAAAA,cAAc,CAAC,iBAAD,CAAd;AACH;AACJ,GATQ,CAAT;AAWA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ,CAAC,CAACD,WAAF,IACAA,WAAW,KAAK,QADhB,IAEAM,KAAK,CAACC,OAAN,CAAcL,MAAM,CAAC,CAAD,CAAN,CAAUA,MAAxB,CAFA,gBAII,oBAAC,OAAD;AAAS,IAAA,QAAQ,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD,CAAS,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAEI,oBAAC,OAAD,CAAS,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQA,MAAM,CAAC,CAAD,CAAN,CAAUA,MAAV,CAAiBM,GAAjB,CAAqB,UAACC,KAAD,EAAQC,CAAR;AAAA,wBACjB,oBAAC,OAAD,CAAS,IAAT;AAAc,MAAA,GAAG,EAAEA,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuBD,KAAvB,CADiB;AAAA,GAArB,CAFR,CAFJ,CAJJ,gBAeI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBZ,EAqBQ,CAAC,CAACT,WAAF,IACAA,WAAW,KAAK,iBADhB,IAEA,CAAC,CAACG,eAAe,CAAC,CAAD,CAAf,CAAmBA,eAFrB,gBAII,oBAAC,OAAD;AAAS,IAAA,OAAO,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD,CAAS,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD,CAAS,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeA,eAAe,CAAC,CAAD,CAAf,CAAmBA,eAAlC,CADJ,CADJ,CAJJ,gBAUI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BZ,CADJ;AAqCH","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Message } from 'semantic-ui-react'\n\nexport default function ErrorToast(props) {\n    const [messageType, setMessageType] = useState(null);\n\n    const { errors, successMessages } = props;\n\n    useEffect(() => {\n        if (!!errors && !!errors[1] && !!errors[1].errors) {\n            setMessageType('errors');\n        }\n    \n        if (!!successMessages && !!successMessages[1] && !!successMessages[1].successMessages) {\n            console.log(successMessages[1].successMessages)\n            setMessageType('successMessages');\n        }\n    })\n\n    return (\n        <React.Fragment>\n            {\n                !!messageType && \n                messageType === 'errors' &&\n                Array.isArray(errors[1].errors) ? \n                (\n                    <Message negative>\n                        <Message.Header>Oops!</Message.Header>\n                        <Message.List>\n                            {\n                                errors[1].errors.map((error, i) => (\n                                    <Message.Item key={i}>{error}</Message.Item>\n                                ))\n                            }\n                        </Message.List>\n                    </Message>\n                ) : (\n                    <React.Fragment />\n                )\n            }\n            {\n                !!messageType && \n                messageType === 'successMessages' &&\n                !!successMessages[1].successMessages ?\n                (\n                    <Message success>\n                        <Message.Header>\n                            <Message.Item>{successMessages[1].successMessages}</Message.Item>\n                        </Message.Header>\n                    </Message>\n                ) : (\n                    <React.Fragment />\n                )\n            }\n        </React.Fragment>\n    );\n}"]},"metadata":{},"sourceType":"module"}