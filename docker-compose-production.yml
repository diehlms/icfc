services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./proxy/nginx.prod.conf:/etc/nginx/conf.d/nginx.prod.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - web
    networks:
      - app_network

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app_network

  web:
    image: ghcr.io/diehlms/icfc-www:latest
    entrypoint: ["/bin/bash", "/rails/entrypoint.sh"]
    environment:
      - RAILS_ENV=production
      - RAILS_SERVE_STATIC_FILES=true
    ports:
      - 3000:3000
    env_file:
      - ".env"
    volumes:
      - ./entrypoint.sh:/rails/entrypoint.sh
      - ./storage:/rails/storage
    networks:
      - app_network

  postgres:
    image: postgres:16-bullseye
    ports:
      - "8881:5432"
    env_file:
      - ".env"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app_network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
    env_file:
      - ".env"
    ports:
      - "9090:9090"
    networks:
      - app_network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    env_file:
      - ".env"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - app_network

  alertmanager:
    image: prom/alertmanager
    volumes:
      - ./configs/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    env_file:
      - ".env"
    ports:
      - "9093:9093"
    networks:
      - app_network

volumes:
  gems:
  postgres-data:
  grafana-storage:

networks:
  app_network:
    driver: bridge